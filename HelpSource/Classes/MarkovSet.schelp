TITLE:: MarkovSet
summary:: first order markov set
categories:: Collections>Unordered, Libraries>MathLib>Markov & Fuzzy
related:: Classes/MarkovSetN, Classes/ShannonMarkovSet, Classes/ShannonFinger

DESCRIPTION::
MarkovSet is a Dictionary that contains keys pointing to WeighBags that contain objects and their probabilities. By parsing in a stream the Set "learns" what element can possibly follow another (see random walk).

Part of link::Guides/MathLib::, a diverse library of mathematical functions.


CLASSMETHODS::

METHOD:: new

ARGUMENT:: args
A list of arrays that each represent one node in the set:

strong::[element, [next_elements], [weigths]]::


table::
    ## strong::next_elements:: || The next node is searched by simple equality. If code::nil::, this is a terminator node
    ## strong::weights:: || The array is normalized. If weigths is code::nil::, equal weight is used.
::

If args is code::nil::, the set is created and may be trained by the other methods.

ARGUMENT:: updateSeeds
If set to code::true::, each element is always added to the seeds

ARGUMENT:: remanence
Allows a dynamic Markov chain in the field of remanence as maximun order.
NOTE:: The remanence is effective only in a dynamic Markov chain context, which requires strong::element:: as an Array. In that case only the method code::nextProb::, code::nextIncludes:: and code::parseSeq:: are operative. Otherwise remanence is simply ignored.
::

METHOD:: fill

ARGUMENT:: length
Number of items to read.

ARGUMENT:: stream
A function or stream that returns items to read.


INSTANCEMETHODS::

METHOD:: read
Read a pair of values.


METHOD:: put
Insert a node. Any old node is overwritten.


METHOD:: remove
Remove a pair of values.


METHOD:: next
Return a next item for the code::arg:: value. If code::arg:: is code::nil::, choose from seeds.


METHOD:: parse
Read code::length:: items into the set from the stream.


METHOD:: asStream
Returns a stream that creates a markov chain.


PRIVATE:: init


EXAMPLES::

subsection:: direct node definition

code::
(
m = MarkovSet([
			[100, [120, 130]],
			[120, [100, 1900]],
			[130, nil],
		]);
)

8.do { m.next(100).postln };
8.do { m.next(120).postln };
8.do { m.next(130).postln };
::

subsection:: training by a stream

code::
m = MarkovSet.fill(100, Pseq([1, 2, 3, 4, Prand([5, 55, 555])], inf).asStream);

8.do { m.next(1).postln };
8.do { m.next(4).postln };
8.do { m.next(55).postln };
::

subsection:: training bit by bit

code::
m = MarkovSet.new;
m.read(\x, \y);
m.read(\x, \z);
m.read(\z, \abcde);
m.read(\y, nil);

8.do { m.next(\x).postln };
8.do { m.next(\y).postln };
8.do { m.next(\z).postln };

m.read(\y, \mmmm);
8.do { m.next(\y).postln }; // now it sometimes terminates

m.remove(\y, \mmmm);
8.do { m.next(\y).postln };
::

subsection:: creating streams

code::
(
m = MarkovSet([
			[100, [120, 130]],
			[120, [100, 1900]],
			[130, [100]],
			[1900, [1000, 2000, 3000]],
		]);
)

m.makeSeeds;
x = m.asStream;
32.do { x.next.postln };


// spy out a stream to feed it in
z = Pseq([100, 200, 300, Prand([1.2, 1.4, 1.5])],inf).asStream;
z = Pspy(m, z).asStream;

32.do { x.next.postln };
15.do { z.next } // add some more elements from z
32.do { x.next.postln };


// event streams
(
SynthDef("mark", { arg out, freq, sustain=1, amp=0.1, pan;
	var env, u=1;
	env = EnvGen.kr(Env.perc(0.03, sustain, 5), 1, doneAction:2);
	3.do { var d; d = exprand(0.01, 1); u = SinOsc.ar(d * 300, u, rrand(0.1, 0.4) * d, 1) };
	Out.ar(out, Pan2.ar(SinOsc.ar(u + 1 * freq, 0, amp * env), pan));

}).store;
)

(
a = Pbind(
	\freq, Pshuf([203, 490, 231, 764, 234], inf),
	\dur, Pshuf([0.5, 0.5, 1.0, 0.25, 0.125, 0.5], inf)
);
m = MarkovSet.fill(20, Pevent(a, Event.default).asStream);
)

m.dict.keysValuesDo { |key, val| postf("key: %\t\tvalue: %\n", key, val) }; ""

// compare:
b = Pchain(Pfsm2(m), (instrument: \mark));
c = Pchain(a, (instrument: \mark));

Ppar([b, c]).play;
::


subsection:: supermarkov

code::
m = MarkovSet.new;

// read in 2 files
m.parseFile("Help/More-On-Getting-Help.html".standardizePath);
m.parseFile("Help/Language/Intro-to-Objects.html".standardizePath);


// write 5 supermarkov html pages
m.writeHtml(nPages:5, pagelength:120);


// you can also create a string like this:
(
x = Pfsm2(m, inf).asStream;
300.do { x.next.post };
)
::

subsection:: Dynamic Markov Chain

code::
d = Array.with(seq1.asArray, seq2.asArray...seqN.asArray);
m = MarkovSet.new(remanence: 3, updateSeeds: true);
m.parseSeq(d, { "Parsing data completed!".postln });
m.nextProb;
::

section:: Authors
Julian Rohrhuber, 2004, 2007.

Yann Ics, 2022 (Dynamic Markov Chain).
